{"version":3,"sources":["components/Editor.js","actions/index.js","constants/actionTypes.js","components/AppendForm.js","actions/network.js","config/index.js","components/LoadButton.js","thunks/load.js","actions/filter.js","components/StoreButton.js","thunks/store.js","components/FilterField.js","components/Item.js","selectors/getFilteredItems.js","components/List.js","App.js","serviceWorker.js","reducers/index.js","reducers/item.js","reducers/list.js","reducers/filterText.js","reducers/networking.js","reducers/error.js","store.js","components/ErrorHandler.js","index.js"],"names":["Editor","React","forwardRef","props","ref","style","width","rows","value","text","onChange","e","onChangeItem","target","ConnectedEditor","connect","state","item","dispatch","type","changeItemAction","disabled","networking","onAppend","appendAction","editor","useRef","onSubmit","preventDefault","trim","current","focus","className","networkErrorAction","error","loadedAction","json","items","savedAction","onLoad","a","fetch","config","response","onClick","list","onStore","method","mode","cache","headers","body","JSON","stringify","console","log","storeItems","filterText","onChangeFilterText","placeholder","memo","children","filter","split","reduce","i","txt","indexOf","length","isMatch","texts","getFilteredItems","map","index","Item","key","App","Boolean","window","location","hostname","match","combineReducers","action","store","createStore","reducer","composeWithDevTools","applyMiddleware","thunk","subscribe","ErrorHandler","useDispatch","useSelector","alert","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6bae25e9.chunk.js","sourcesContent":["import React from 'react';\nimport {connect} from 'react-redux';\nimport {changeItemAction} from '../actions';\n\nconst mapStateToProps = state => ({\n    text: state.item\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onChangeItem: item => dispatch(changeItemAction(item))\n});\n\nconst Editor = React.forwardRef((props,ref) => {\n    const changeHandler = e => {\n        props.onChangeItem(e.target.value);\n    };\n\n    return (<textarea\n        style={{width:'100%'}}\n        //cols={100}\n        rows={5}\n        ref={ref}\n        value={props.text}\n        onChange={changeHandler}\n    />)\n});\n\nconst ConnectedEditor = connect(mapStateToProps, mapDispatchToProps, null, {\n    forwardRef: true\n})(Editor);\nexport default ConnectedEditor;","import {APPEND, CHANGE_ITEM, CLEAR_ERROR} from '../constants/actionTypes';\n\nexport const appendAction = item => ({type: APPEND, item});\nexport const changeItemAction = item => ({type: CHANGE_ITEM, item});\nexport const clearErrorAction = item => ({type: CLEAR_ERROR});","export const APPEND = 'APPEND';\nexport const CHANGE_ITEM = 'CHANGE_ITEM';\nexport const CLEAR_ERROR = 'CLEAR_ERROR';\n\nexport const NETWORKING_STARTED = 'NETWORKING_STARTED';\nexport const NETWORKING_FINISHED = 'NETWORKING_FINISHED';\nexport const NETWORK_ERROR = 'NETWORK_ERROR';\n\nexport const LOAD_SUCCEEDED = 'LOAD_SUCCEEDED';\nexport const SAVE_SUCCEEDED = 'SAVE_SUCCEEDED';\n\nexport const SET_FILTER = 'SET_FILTER';\nexport const CLEAR_FILTER = 'CLEAR_FILTER';","import React from 'react';\nimport Editor from './Editor';\nimport {connect} from 'react-redux';\nimport {appendAction} from '../actions';\n\nconst mapStateToProps = state => ({\n    text: state.item,\n    disabled: state.networking\n});\n\nconst mapDispatchToProps = dispatch => ({\n    onAppend: item=>dispatch(appendAction(item))\n});\n\nconst AppendForm = props=>{\n    const editor = React.useRef();\n\n    const submitHandler = e => {\n        e.preventDefault();\n        if(props.text.trim() === '') return;\n        \n        props.onAppend(props.text);\n        editor.current.focus();\n    };\n\n    return (\n        <form onSubmit={submitHandler}>\n            <Editor ref={editor}/>\n            <button\n                className='btn green'\n                disabled={props.disabled}\n            >Append</button>\n        </form>\n    );\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(AppendForm);","import {\n    NETWORKING_STARTED,\n    NETWORKING_FINISHED,\n    NETWORK_ERROR,\n    LOAD_SUCCEEDED,\n    SAVE_SUCCEEDED\n} from '../constants/actionTypes';\n\nexport const startNetworkAction = () => ({type: NETWORKING_STARTED});\nexport const finishNetworkAction = () => ({type: NETWORKING_FINISHED});\nexport const networkErrorAction = error => ({type: NETWORK_ERROR, error});\n\nexport const loadedAction = json => ({type: LOAD_SUCCEEDED, items: json.items});\nexport const savedAction = items => ({type: SAVE_SUCCEEDED, items});","export default {\n    apiUrl: 'https://k3nluu36pc.execute-api.ap-northeast-1.amazonaws.com/test111'\n}","import React from 'react';\nimport {connect} from 'react-redux';\nimport {loadItems} from '../thunks/load';\n\nconst mapStateToProps = state => ({\n    disabled: state.networking\n});\n\nconst mapDispatchToProps = dispatch => ({\n    onLoad: ()=>dispatch(loadItems())\n});\n\nconst LoadButton = props => (\n    <button\n        className='btn blue'\n        onClick={props.onLoad}\n        disabled={props.disabled}\n    >Load</button>\n);\nexport default connect(mapStateToProps, mapDispatchToProps)(LoadButton);","import {clearFilterAction} from '../actions/filter';\nimport {\n    startNetworkAction,\n    finishNetworkAction,\n    loadedAction,\n    networkErrorAction\n} from '../actions/network';\nimport config from '../config';\n\nexport const loadItems = () => async dispatch => {\n    dispatch(startNetworkAction());\n    try {\n        const response = await fetch(config.apiUrl);\n        const json = await response.json();\n        dispatch(clearFilterAction());\n        dispatch(loadedAction(json));\n    }catch(e){\n        dispatch(networkErrorAction(e));\n    }\n    dispatch(finishNetworkAction());\n}","import {SET_FILTER, CLEAR_FILTER} from '../constants/actionTypes';\n\nexport const setFilterAction = filterText => ({type:SET_FILTER, filterText});\nexport const clearFilterAction = () => ({type:CLEAR_FILTER});","import React from 'react';\nimport {connect} from 'react-redux';\nimport {storeItems} from '../thunks/store';\n\nconst mapStateToProps = state => ({\n    items: state.list,\n    disabled: state.networking\n});\n\nconst mapDispatchToProps = dispatch => ({\n    onStore: items => dispatch(storeItems(items))\n});\n\nconst StoreButton = props => {\n    const clickHandler = () => {\n        props.onStore(props.items)\n    }\n    return (\n        <button\n            className='btn red'\n            onClick={clickHandler}\n            disabled={props.disabled}\n        >Store</button>\n    );\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(StoreButton);","import {\n    startNetworkAction,\n    finishNetworkAction,\n    savedAction,\n    networkErrorAction\n} from '../actions/network';\nimport config from '../config';\n\nexport const storeItems = (items) => async dispatch => {\n    dispatch(startNetworkAction());\n    try {\n        const response = await fetch(config.apiUrl,{\n            method: 'PUT', // *GET, POST, PUT, DELETE, etc.\n            mode: 'cors', // no-cors, *cors, same-origin\n            cache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached\n           // credentials: 'same-origin', // include, *same-origin, omit\n            headers: {\n                //'Access-Control-Allow-Origin':'*',\n                'Content-Type': 'application/json'\n            },\n            //redirect: 'follow', // manual, *follow, error\n            //referrerPolicy: 'no-referrer', // no-referrer, *client\n            body: JSON.stringify({items})\n        });\n        const json = await response.text();\n        console.log('store items response:',json);\n        dispatch(savedAction(json));\n    }catch(e){\n        dispatch(networkErrorAction(e));\n    }\n    dispatch(finishNetworkAction());\n}","import React from 'react';\n//import {useDispatch, useSelector} from 'react-redux';\nimport { connect } from 'react-redux';\nimport {setFilterAction} from '../actions/filter';\n\nconst mapStateToProps = state => ({\n    filterText: state.filterText\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onChangeFilterText: text => dispatch(setFilterAction(text))\n});\n\nconst FilterField = props => {\n    // const dispatch = useDispatch();\n    // const filterText = useSelector(state => state.filterText);\n\n    const changeHandler = e => {\n       //dispatch(setFilterAction(e.target.value));\n       props.onChangeFilterText(e.target.value);\n    }\n    return (\n        <input\n            type='text'\n            style={{width:'30%'}}\n            placeholder='search text'\n            onChange={changeHandler}\n            value={props.filterText}\n        />\n    )\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(FilterField);","import React from 'react';\n\nexport default React.memo(props => {\n    return (\n        <pre className='item'>{props.children}</pre>\n    );\n});","// const isMatch = (item, filterText) => filterText.split(' ').every(\n//     txt => item.includes(txt)\n// );\nconst isMatch = (item, filterText) => filterText.split(' ')\n.reduce((i, txt) => {\n    if(i<0) return i;\n    i = item.indexOf(txt, i);\n    if(i<0) return i;\n    i += txt.length;\n    return i;\n},0)>=0;\n\nexport default state => state.list.filter(\n    item => isMatch(item, state.filterText)\n)","import React from 'react';\nimport {connect} from 'react-redux';\nimport Item from './Item';\nimport getFilteredItems from '../selectors/getFilteredItems';\n\nconst mapStateToProps = state => ({\n    //texts: state.list\n    texts: getFilteredItems(state)\n});\n\nconst List = props => (\n    <div>\n        {props.texts.map((txt,index)=>(\n            <Item key={index}>{txt}</Item>\n        ))}\n    </div>\n);\n\nexport default connect(mapStateToProps)(List);","import React from 'react';\nimport './App.css';\nimport AppendForm from './components/AppendForm';\nimport LoadButton from './components/LoadButton';\nimport StoreButton from './components/StoreButton';\nimport FilterField from './components/FilterField';\nimport List from './components/List';\n\nconst App = () => (\n  <div className=\"App\">\n    <FilterField />\n    <div className='row'>\n      <div className='column'>\n        <LoadButton />\n      </div>\n      <div className='column'>\n        <AppendForm />\n      </div>\n      <div className='column'>\n        <StoreButton />\n      </div>\n    </div>\n    <List />\n  </div>\n)\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import item from './item';\nimport list from './list';\nimport networking from './networking';\nimport error from './error';\nimport filterText from './filterText';\nimport { combineReducers } from 'redux';\n\nexport default combineReducers({\n    item,\n    list,\n    filterText,\n    networking,\n    error\n});","import {CHANGE_ITEM, APPEND} from '../constants/actionTypes'\n\nexport default (state = '', action)=>{\n    // const act = {\n    //     APPEND: list=>list.concat([action.item])\n    // }[action.type] || (list=>list);\n    // return act(list);\n    \n    switch(action.type){\n        case CHANGE_ITEM:\n            return action.item;\n        case APPEND:\n            return '';\n        default:\n            return state;\n    }\n};","import {APPEND, LOAD_SUCCEEDED} from '../constants/actionTypes'\n\nexport default (state = [], action)=>{\n    // const act = {\n    //     APPEND: list=>list.concat([action.item])\n    // }[action.type] || (list=>list);\n    // return act(list);\n    \n    switch(action.type){\n        case APPEND:\n            return [\n                ...state,\n                action.item\n            ];\n            //return list.concat([action.item]);\n        case LOAD_SUCCEEDED:\n            return action.items;\n        default:\n            return state;\n    }\n};","import {SET_FILTER,CLEAR_FILTER} from '../constants/actionTypes';\n\nexport default (state = '', action) => {\n    switch(action.type){\n        case SET_FILTER:\n            return action.filterText;\n        case CLEAR_FILTER:\n            return '';\n        default:\n            return state;\n    }\n}","import {NETWORKING_STARTED, NETWORKING_FINISHED} from '../constants/actionTypes';\n\nexport default (state = false, action)=>{    \n    switch(action.type){\n        case NETWORKING_STARTED:\n            return true;\n        case NETWORKING_FINISHED:\n            return false;\n        default:\n            return state;\n    }\n};","import {NETWORK_ERROR, CLEAR_ERROR} from '../constants/actionTypes';\n\nexport default (state = '', action)=>{    \n    switch(action.type){\n        case NETWORK_ERROR:\n            return action.error;\n        case CLEAR_ERROR:\n            return '';\n        default:\n            return state;\n    }\n};","import {createStore, applyMiddleware} from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\nimport reducer from './reducers';\n\n//const reduxStateString = window.localStorage.getItem('reduxState');\n//JSON.parse(reduxStateString)||\nconst reduxState = {\n    item: '',\n    list: [],\n    filterText: ''\n};\n\nexport const store = createStore(\n    reducer,\n    reduxState,\n    composeWithDevTools(applyMiddleware(thunk))\n);\n\nstore.subscribe(()=>{\n   // window.localStorage.setItem('reduxState', JSON.stringify(store.getState()));\n});","import {useDispatch, useSelector} from 'react-redux';\nimport {clearErrorAction} from '../actions';\n\nconst ErrorHandler = props=>{\n    const dispatch = useDispatch();\n    const error = useSelector(state => state.error);\n    if(error) {\n        dispatch(clearErrorAction());\n        alert(error);\n    }\n    return props.children;\n};\n\nexport default ErrorHandler;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {Provider} from 'react-redux';\nimport {store} from './store';\nimport ErrorHandler from './components/ErrorHandler';\n\nReactDOM.render((\n    <Provider store={store}>\n        <ErrorHandler>\n            <App />\n        </ErrorHandler>\n    </Provider>\n), document.getElementById('root'));\n\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}